syntax = "proto3";

package raft;

// Raft consensus service for distributed key-value cache
service RaftService {
  // RequestVote RPC for leader election
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
  
  // AppendEntries RPC for log replication and heartbeats
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
  
  // InstallSnapshot RPC for snapshot replication
  rpc InstallSnapshot(InstallSnapshotRequest) returns (InstallSnapshotResponse);
  
  // Health check for cluster membership
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// RequestVote RPC request
message RequestVoteRequest {
  uint64 term = 1;                    // Candidate's term
  string candidate_id = 2;            // Candidate requesting vote
  uint64 last_log_index = 3;          // Index of candidate's last log entry
  uint64 last_log_term = 4;           // Term of candidate's last log entry
}

// RequestVote RPC response
message RequestVoteResponse {
  uint64 term = 1;                    // Current term, for candidate to update itself
  bool vote_granted = 2;              // True means candidate received vote
}

// AppendEntries RPC request
message AppendEntriesRequest {
  uint64 term = 1;                    // Leader's term
  string leader_id = 2;               // Leader ID
  uint64 prev_log_index = 3;          // Index of log entry immediately preceding new ones
  uint64 prev_log_term = 4;           // Term of prev_log_index entry
  repeated LogEntry entries = 5;      // Log entries to store (empty for heartbeat)
  uint64 leader_commit = 6;           // Leader's commit index
}

// AppendEntries RPC response
message AppendEntriesResponse {
  uint64 term = 1;                    // Current term, for leader to update itself
  bool success = 2;                   // True if follower contained entry matching prev_log_index and prev_log_term
  uint64 last_log_index = 3;          // Index of the last log entry that was successfully replicated
  uint64 conflict_index = 4;          // Conflict information for optimization
  uint64 conflict_term = 5;           // Term of conflicting entry
}

// InstallSnapshot RPC request
message InstallSnapshotRequest {
  uint64 term = 1;                    // Leader's term
  string leader_id = 2;               // Leader ID
  uint64 last_included_index = 3;     // Last included index in the snapshot
  uint64 last_included_term = 4;      // Last included term in the snapshot
  uint64 offset = 5;                  // Offset of the chunk in the snapshot
  bytes data = 6;                     // Raw bytes of the snapshot chunk
  bool done = 7;                      // True if this is the last chunk
}

// InstallSnapshot RPC response
message InstallSnapshotResponse {
  uint64 term = 1;                    // Current term, for leader to update itself
  bool success = 2;                   // True if snapshot was successfully installed
}

// Log entry for replication
message LogEntry {
  uint64 term = 1;                    // Term when entry was received by leader
  uint64 index = 2;                   // Index of the log entry
  bytes command = 3;                  // Command to be applied to state machine
  uint64 timestamp = 4;               // Timestamp when entry was created
}

// Health check request
message HealthCheckRequest {
  string node_id = 1;                 // ID of the requesting node
  uint64 timestamp = 2;               // Timestamp of the request
}

// Health check response
message HealthCheckResponse {
  string node_id = 1;                 // ID of the responding node
  bool healthy = 2;                   // Health status
  uint64 term = 3;                    // Current term
  string role = 4;                    // Current role (follower, candidate, leader)
  uint64 timestamp = 5;               // Timestamp of the response
} 